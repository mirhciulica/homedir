" Created 05.11.2009 by mirhciulica

set autoindent
set encoding=utf-8
set hidden
set nocompatible
set showcmd
set showmatch
set showmode
set smartindent
set wildmenu
set wildmode=longest,list,full

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
    set wildignore+=.git\*,.hg\*,.svn\*
endif
 
" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab

set ai
set si

set backspace=eol,start,indent
set laststatus=2
set ruler
set ttyfast

set list
if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

set incsearch
set mouse=a
set norelativenumber
set number
set pastetoggle=<F3>
set ignorecase
set smartcase
set title
set foldcolumn=1

set nowrap
set textwidth=79
set formatoptions=qrn1
try
    set colorcolumn=80
catch
endtry

set bg=dark
set grepprg=grep\ -nH\ $*
set ofu=syntaxcomplete#Complete
filetype plugin indent on
setlocal tw=80
let g:tex_flavor = "latex"

if has("gui_running")
    " CR doesn't work in gVim
    map <lf> <cr>
    set guitablabel=%-0.12t%M
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
    set guioptions+=a
    set guioptions-=m
    set lines=50 columns=85

    if has("win32")
        set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h9
    else
        set guifont=Inconsolata\ for\ PowerLine\ Medium\ 10
    endif
endif

" Added from begriffs on 04.08.2014
" https://github.com/begriffs/vimrc/blob/master/.vimrc
"
" Return to last edit position when opening files (You want this!)
augroup last_edit
  autocmd!
  autocmd BufReadPost *
       \ if line("'\"") > 0 && line("'\"") <= line("$") |
       \ exe "normal! g`\"" |
       \ endif
augroup END
" Remember info about open buffers on close
"set viminfo^=%

let mapleader = ","
let g:mapleader = ","

" Leader key timeout
set tm=2000
"
" Allow the normal use of "," by pressing it twice
noremap ,, ,

" Open window splits in various places
nmap <leader>sh :leftabove vnew<CR>
nmap <leader>sl :rightbelow vnew<CR>
nmap <leader>sk :leftabove new<CR>
nmap <leader>sj :rightbelow new<CR>

" Added from haridas on 04.05.2014
" https://github.com/haridas/Dotfiles/blob/master/vim-files/vim/vimrc#L119
"
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

",W Command to remove white space from a file.
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" ,ft Fold tag, helpful for HTML editing.
" nnoremap <leader>ft vatzf

" ,q Re-hardwrap Paragraph
nnoremap <leader>q gqip

" ,v Select just pasted text.
nnoremap <leader>v V`]

" ,ev Shortcut to edit .vimrc file on the fly on a vertical window.
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>

" Supertab smarter completition. 
" if '/' -> filename completition, otherwise omnicompletition
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"

" don't blink the screen
set novb

" highlight redundant whitespaces and tabs.
highlight RedundantSpaces ctermbg=red guibg=red
match RedundantSpaces /\s\+$\| \+\ze\t\|\t/

set t_Co=256
colorscheme molokai

" tab navigation like firefox
nmap <C-S-tab> :tabprevious<cr>
nmap <C-tab> :tabnext<cr>
map <C-S-tab> :tabprevious<cr>
map <C-tab> :tabnext<cr>
imap <C-S-tab> <ESC>:tabprevious<cr>i
imap <C-tab> <ESC>:tabnext<cr>i

if !has("gui_running")
   nmap <leader>N :tabnext<cr>
   nmap <leader>P :tabprevious<cr>
   nmap <leader><F4> :tabclose<cr>
end

" using CtrlP now
" nnoremap <leader>b :bp<CR>
" nnoremap <leader>f :bn<CR>
" nnoremap <leader>g :e#<CR>

"
" diff undos command
"
nmap du :wincmd w<cr>:normal u<cr>:wincmd w<cr>

"
" Enable spellchecking conditionally
"
map <leader>se :setlocal spell spelllang=en_us<CR>
map <leader>ss :setlocal spell spelllang=ro<CR>
map <leader>sn :setlocal nospell<CR>

" 
" Configure tabs for the console version
"
function MyTabLine()
  let s = ''
  for i in range(tabpagenr('$'))
    " select the highlighting
    if i + 1 == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif

    " set the tab page number (for mouse clicks)
    let s .= '%' . (i + 1) . 'T'

    " the label is made by MyTabLabel()
    let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
  endfor

  " after the last tab fill with TabLineFill and reset tab page nr
  let s .= '%#TabLineFill#%T'

  " right-align the label to close the current tab page
  if tabpagenr('$') > 1
    let s .= '%=%#TabLine#%999Xclose'
  endif

  return s
endfunction

function MyTabLabel(n)
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)
  return bufname(buflist[winnr - 1])
endfunction


" Added from Vlad Dogaru on 06.03.2010
"
" for reading commands from comments
set modeline

" Mapping from usenet
imap jj <Esc>

autocmd FileType text       setlocal autoindent expandtab sts=4 sw=4
autocmd FileType java 	    setlocal tw=78 cin foldmethod=marker
autocmd FileType c,cpp 	    setlocal tw=78 cindent expandtab sts=4 sw=4
autocmd FileType python     setlocal autoindent expandtab sts=4 sw=4
autocmd FileType haskell    setlocal tw=72 sw=2 sts=2 et
autocmd FileType tex	    setlocal tw=72 sw=2 sts=2 ai
autocmd FileType tex	    so ~/.vim/abbrevs.vim
autocmd FileType php	    setlocal tw=80 cindent fo=croql expandtab sts=4 sw=4
autocmd FileType html       setlocal autoindent expandtab sts=4 sw=4
autocmd FileType xml        setlocal autoindent expandtab sts=4 sw=4
autocmd FileType actionscript setlocal autoindent sts=4 sw=4 tw=100
autocmd BufRead,BufNewFile *.wiki   setlocal ft=creole
autocmd BufRead,BufNewFile *.tex    setlocal ft=tex
autocmd BufRead,BufNewFile *.cool   setlocal ft=cool
autocmd BufRead,BufNewFile *.cl     setlocal ft=cool
autocmd BufRead,BufNewFile *.miC    setlocal ft=C
autocmd BufRead,BufNewFile *.g      setlocal ft=antlr
autocmd BufRead,BufNewFile *.as     setlocal ft=actionscript

set autowrite

" quick fixing
nnoremap <Tab> :cnext<Cr>
nnoremap <S-Tab> :cprev<Cr>
nnoremap <F9> :make<Cr>

if has("cscope")
        " Look for a 'cscope.out' file starting from the current directory,
        " going up to the root directory.
        let s:dirs = split(getcwd(), "/")
        while s:dirs != []
                let s:path = "/" . join(s:dirs, "/")
                if (filereadable(s:path . "/cscope.out"))
                        execute "cs add " . s:path . "/cscope.out " . s:path . " -v"
                        break
                endif
                let s:dirs = s:dirs[:-2]
        endwhile

        set csto=0	" Use cscope first, then ctags
        set cst		" Only search cscope
        set csverb	" Make cs verbose

        nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
        nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
        nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

        " Open a quicfix window for the following queries.
        set cscopequickfix=s-,c-,d-,i-,t-,e-,g-
endif

map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" Max 20 tabs
set tabpagemax=20

" VAM
fun! EnsureVamIsOnDisk(vam_install_path)
  " windows users may want to use http://mawercer.de/~marc/vam/index.php
  " to fetch VAM, VAM-known-repositories and the listed plugins
  " without having to install curl, 7-zip and git tools first
  " -> BUG [4] (git-less installation)
  if !filereadable(a:vam_install_path.'/vim-addon-manager/.git/config')
     \&& 1 == confirm("Clone VAM into ".a:vam_install_path."?","&Y\n&N")
    " I'm sorry having to add this reminder. Eventually it'll pay off.
    call confirm("Remind yourself that most plugins ship with ".
                \"documentation (README*, doc/*.txt). It is your ".
                \"first source of knowledge. If you can't find ".
                \"the info you're looking for in reasonable ".
                \"time ask maintainers to improve documentation")
    call mkdir(a:vam_install_path, 'p')
    execute '!git clone --depth=1 git://github.com/MarcWeber/vim-addon-manager '.shellescape(a:vam_install_path, 1).'/vim-addon-manager'
    " VAM runs helptags automatically when you install or update
    " plugins
    exec 'helptags '.fnameescape(a:vam_install_path.'/vim-addon-manager/doc')
  endif
endf

fun! SetupVAM()
  " Set advanced options like this:
  " let g:vim_addon_manager = {}
  " let g:vim_addon_manager['key'] = value

  " Example: drop git sources unless git is in PATH. Same plugins can
  " be installed from www.vim.org. Lookup MergeSources to get more control
  " let g:vim_addon_manager['drop_git_sources'] = !executable('git')

  " VAM install location:
  let vam_install_path = expand('$HOME') . '/.vim/vim-addons'
  call EnsureVamIsOnDisk(vam_install_path)
  exec 'set runtimepath+='.vam_install_path.'/vim-addon-manager'

  " Tell VAM which plugins to fetch & load:
  call vam#ActivateAddons([], {'auto_install' : 0})
  " sample: call vam#ActivateAddons(['pluginA','pluginB', ...], {'auto_install' : 0})

  " Addons are put into vam_install_path/plugin-name directory
  " unless those directories exist. Then they are activated.
  " Activating means adding addon dirs to rtp and do some additional
  " magic

  " How to find addon names?
  " - look up source from pool
  " - (<c-x><c-p> complete plugin names):
  " You can use name rewritings to point to sources:
  " ..ActivateAddons(["github:foo", .. => github://foo/vim-addon-foo
  " ..ActivateAddons(["github:user/repo", .. => github://user/repo
  " Also see section "2.2. names of addons and addon sources" in VAM's documentation
endfun
call SetupVAM()
" experimental [E2]: run after gui has been started (gvim) [3]
" option1: au VimEnter * call SetupVAM()
" option2: au GUIEnter * call SetupVAM()

call vam#ActivateAddons(["github:tpope/vim-fugitive", "vim-airline", "ctrlp", "Syntastic", "Supertab", "neocomplcache", "Tagbar", "github:scrooloose/nerdtree"])

let g:airline_powerline_fonts = 1

let g:airline#extensions#tabline#enabled = 1

" Mapping to NERDTree
nnoremap <leader>n :NERDTreeToggle<cr>
let NERDTreeIgnore=['\.vim$', '\~$', '\.pyc$']

" Tab color settings to make it more visible.
hi MBEChanged ctermfg=white
hi MBENormal ctermfg=white

" Ctrlp
let g:ctrlp_max_files = 0
let g:ctrlp_working_path_mode = 'c'
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_user_command = {
  \ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files'],
    \ 2: ['.hg', 'hg --cwd %s locate -I .'],
    \ },
  \ }
"  \ 'fallback': 'find %s -type f | egrep -v "/\.(git|hg|svn)|solr|tmp/" | egrep -v "\.(png|exe|jpg|gif|jar|class|swp|swo|log|gitkep|keepme|so|o)$"'
nnoremap <leader>f :CtrlP<cr>
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>T :CtrlPBufTag<cr>
nnoremap <leader>t :CtrlPTag<cr>
nnoremap <leader>F :CtrlPCurWD<cr>
nnoremap <leader>M :CtrlPMRUFiles<cr>
nnoremap <leader>m :CtrlPMixed<cr>
nnoremap <leader>B :CtrlPLine<cr>

" Tagbar key bindings."
nmap <leader>l <ESC>:TagbarToggle<cr>
imap <leader>l <ESC>:TagbarToggle<cr>i

 " Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
 " Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*' 

" SuperTab like snippets behavior.
imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

 " Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType java setlocal omnifunc=javacomplete#Complete
" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'

" ctags
" Prevent automatic ctag updates
let g:easytags_auto_update = 0
let g:easytags_auto_highlight = 0
let g:easytags_on_cursorhold = 0

" Generate tags manually
nmap <leader>tu :UpdateTags<CR>

" Scan recursively, not just current file
let g:easytags_autorecurse = 1
" Follow symbolic links
let g:easytags_resolve_links = 1

" Toggle tagbar
nmap <leader>tt :TagbarToggle<CR>
" Close tagbar after jumping to a tag
let g:tagbar_autoclose = 1

" Ggrep
let g:extradite_width = 60
" Hide messy Ggrep output and copen automatically
function! NonintrusiveGitGrep(term)
  execute "copen"
" Map 't' to open selected item in new tab
  execute "nnoremap <silent> <buffer> t <C-W><CR><C-W>T"
  execute "silent! Ggrep " . a:term
  execute "redraw!"
endfunction

command! -nargs=1 GGrep call NonintrusiveGitGrep(<q-args>)
nmap <leader>gs :Gstatus<CR>
nmap <leader>gg :copen<CR>:GGrep
nmap <leader>gl :Extradite!<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>gb :Gblame<CR>
nnoremap <silent> <C-\> :call NonintrusiveGitGrep(expand("<cword>"))<CR>
vnoremap <silent> <C-\> "*y:call NonintrusiveGitGrep(@*)<CR>

function! CommittedFiles()
" Clear quickfix list
  let qf_list = []
" Find files committed in HEAD
  let git_output = system("git diff-tree --no-commit-id --name-only -r HEAD\n")
  for committed_file in split(git_output, "\n")
    let qf_item = {'filename': committed_file}
    call add(qf_list, qf_item)
  endfor
" Fill quickfix list with them
  call setqflist(qf_list, '')
endfunction

" Show list of last-committed files
nnoremap <silent> <leader>g? :call CommittedFiles()<CR>:copen<CR>
